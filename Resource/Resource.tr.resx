<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutUs" xml:space="preserve">
    <value>Bizim Hakkında</value>
  </data>
  <data name="About_menu" xml:space="preserve">
    <value>HAKKIMIZDA</value>
  </data>
  <data name="Barcode1" xml:space="preserve">
    <value>Barkod; Bir verinin veya verilerin otomatik olarak hızlı ve hatasız bir şekilde başka bir ortama aktarılmasında kullanılan bir yöntemdir. Değişik kalınlıktaki dik çizgi ve boşluklardan oluşan barkodlar tek boyutlu [1D] barkod olarak adlandırılır. Kare veya dikdörtgen şekillerle basılan barkodlar iki boyutlu [2D] olarak adlandırılır.  Kare veya diktörgen biçiminde olan bu yapının genel adı ise Data Matrix’tir. Barkodların, barcode okuyucu, barcode yazıcı, bilgisayar, barkod etiketi, yazılım vb. ürünler ile birlikte kullanılması ile barkodlu sistemler oluşur.</value>
  </data>
  <data name="Barcode2" xml:space="preserve">
    <value />
  </data>
  <data name="Barcode3" xml:space="preserve">
    <value>Barkod Tipleri

 

1D (Çizgikod=1 Boyutlu) ve 2D (Karekod=2 Boyutlu) bir çok barkod tipi bulunmaktadır. Kullanım alanına bağlı olarak farklı barkod tipleri kullanılmasına rağmen günümüzde en yaygın kullanılan barkod tiplerinin başında ticari ürünlerin barkodlanmasında kullanılan EAN13 ve Türkiye'de ilaçların barkodlanmasında kullanılan Datamatrix barkod tipleri gösterilebilir.

 

Bu barkod tiplerinden bazıları şunlardır: Barkod Tipi	 Kategori	 Açıklama
 EAN-13	1D	 Ağırlıklı olarak ticari ürünlerin barkodlanmasında kullanılmaktadır.
 EAN-8	1D	 Ağırlıklı olarak ticari ürünlerin (küçük boyutlu) barkodlanmasında kullanılmaktadır.
 UPC-A	1D	 Ağırlıklı olarak ticari ürünlerin barkodlanmasında (ABD ve Kanada bölgesinde) kullanılmaktadır.
 UPC-E	1D	 Ağırlıklı olarak ticari ürünlerin (küçük boyutlu) barkodlanmasında (ABD ve Kanada bölgesinde) kullanılmaktadır.
 Code 39	1D	 Serbest kullanım
 Code 128	1D	 Serbest kullanım
 Code 93	1D	 Serbest kullanım
 Interleaved 2 Of 5	1D	 Serbest kullanım
 Codabar	1D	 Ağırlıklı olarak eski dönemlerde kütüphaneler ve hava yolu faturalarında kullanılmaktaydı.
 UCC/EAN 128	1D	 Ağırlıklı olarak lojistik sektöründe kullanılmaktadır.
 PDF417	2D	 Serbest olarak en yaygın kullanılan ve 2D kategorisindeki barkod tipidir.
 Datamatrix	2D	 Türkiye'de yaygın olarak ilaçlarda kullanılmaktadır.
 QrCode	2D	 Son dönemlerde web sayfalarına link vermede kullanılmaktadır.</value>
  </data>
  <data name="Barcode4" xml:space="preserve">
    <value>Barkod okuma sistemleri üç ana elemandan oluşur;

Barkod görüntüsü ile optik etkileşimi sağlayan tarayıcıda giriş mödülü,
Çubuk ve boşluklardan oluşan simgeleri ASCII verilerine çevirecek şekilde yorumlayan kod çözümleyici,
Kod çözümü ardından bilgileri ana bir bilgisayar sistemine ileten haberleşme birimleri.
Barkodun okunması için, hareketli demet bir tarayıcı barkod sembolüne ışık gönderir ve ışığı ileri geri titreştirerek her geçişte çubuklardan ve boşluktan yansıyan ışığı ölçer.

Koyu renkli çubuklar boşluklara göre daha fazla ışık emdiğinden, sembolden yansıyan ışık çeşitli seviyelerden oluşmaktadır. Yansıyan ışığın analiz edilmesiyle, okuma cihazı çubukların ve boşlukların durumunu kodun türünü ve kodlanmış veriyi belirleyebilir.</value>
  </data>
  <data name="BarcodeHistory" xml:space="preserve">
    <value>BARCODE </value>
  </data>
  <data name="Contact_menu" xml:space="preserve">
    <value>İLETİŞİM</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>E posta</value>
  </data>
  <data name="EN_menu" xml:space="preserve">
    <value>TR</value>
  </data>
  <data name="Generator_menu" xml:space="preserve">
    <value>Generate</value>
  </data>
  <data name="Home_menu" xml:space="preserve">
    <value>ANA SAYFA</value>
  </data>
  <data name="HowDoesBarcodeWork" xml:space="preserve">
    <value>BARCODE NASIL ÇALIŞIR </value>
  </data>
  <data name="LanguageCheng" xml:space="preserve">
    <value>Türkçe </value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Giriş</value>
  </data>
  <data name="Login_successful" xml:space="preserve">
    <value>t</value>
  </data>
  <data name="Logout_menu" xml:space="preserve">
    <value>Çıkış</value>
  </data>
  <data name="message" xml:space="preserve">
    <value>Mesaj</value>
  </data>
  <data name="name" xml:space="preserve">
    <value>İsim</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Şifre</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>Telefon numarası</value>
  </data>
  <data name="Photo" xml:space="preserve">
    <value>Fotograf</value>
  </data>
  <data name="Register_menu" xml:space="preserve">
    <value>Uye ol </value>
  </data>
  <data name="registration" xml:space="preserve">
    <value>uy</value>
  </data>
  <data name="Scan_menu" xml:space="preserve">
    <value>TARA</value>
  </data>
  <data name="Signin_menu" xml:space="preserve">
    <value>GİRİŞ</value>
  </data>
  <data name="Signup_menu" xml:space="preserve">
    <value>ÜYE OL</value>
  </data>
  <data name="subject" xml:space="preserve">
    <value>Başlık</value>
  </data>
  <data name="submitmessage" xml:space="preserve">
    <value>Mesahj gönder</value>
  </data>
  <data name="TypeOfBarcode" xml:space="preserve">
    <value>BARCODE ÇEŞİTLERİ</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Kullanıcı </value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Hoş geldiniz</value>
  </data>
  <data name="whatisbarcode" xml:space="preserve">
    <value>BARCODE NEDIR ?</value>
  </data>
</root>